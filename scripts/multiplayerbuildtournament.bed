--///////////////////////////////////////////////////////////////////////////
--// MultiplayerBuildTournament.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2005 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 5.1.2006 16:14
--// 
--// @Author Pasi Matilainen (pasi.matilainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////

dofile("data/menu/backdrops1.bed")
dofile("data/menu/backdrops2.bed")
dofile("data/menu/track_images.bed")
dofile("data/menu/selection_elements.bed")
dofile("data/menu/garage_elements1.bed")

local state={}

local BuildMenuButtons
Events = { }
local EventGrid = { }

local CurrentEvent
local CurRow
local CurCol

local ValidTracks
local SelectedTrack = 1

menu_multiplayer_buildtournament = CreateMenuFromTemplate("template_multiplayer")
menu_multiplayer_buildtournament.options.title = TITLE_LIVE_BUILD
menu_multiplayer_buildtournament.back = function() menu_multiplayer_buildtournament.backaction() end

function EnterBuildPartyTournamentMenu(okaction, backaction)
	menu_multiplayer_buildtournament.okaction = okaction
	menu_multiplayer_buildtournament.backaction = backaction
	menu_multiplayer_buildtournament.partymode = true
	menu_multiplayer_buildtournament.type = ReplicatedSession.GAMETYPE_STUNT
	menu_multiplayer_buildtournament.edit = false

	Events = { }

	EnterMenu("menu_multiplayer_buildtournament")
end

function EnterBuildTournamentMenu(tournamenttype, okaction, backaction, edit, numplayers)
	menu_multiplayer_buildtournament.okaction = okaction
	menu_multiplayer_buildtournament.backaction = backaction
	menu_multiplayer_buildtournament.type = tournamenttype
	menu_multiplayer_buildtournament.numplayers = numplayers
	menu_multiplayer_buildtournament.partymode = false
	menu_multiplayer_buildtournament.edit = false
	
	Events = { }
	
	if edit and Session and Session:GetNumRaces() > 0 then
		local info = Session:GetInfo()
		for i = 1, Session:GetNumRaces() do
			Events[i] = { trackid = info.Races[i].StageNr, lapsOrTimeLimit = info.Races[i].LapsOrTimeLimit, numhunters = info.Races[i].NumHunters, rules = info.Races[i].EventType }
		end
	end
	 
	EnterMenu("menu_multiplayer_buildtournament")
end

function EnterBuildTournamentMenuAfterEdit(currentevent)
	if table.getn(Events) > 0 then
		CurrentEvent = currentevent
		menu_multiplayer_buildtournament.edit = true
	else
		menu_multiplayer_buildtournament.edit = false
	end
	EnterMenu("menu_multiplayer_buildtournament")
end


local function ShowEventWindows()

	local delay=0.0
	local num_windows=table.getn(state.eventwindows)

	for i=1,num_windows do
		local w=state.eventwindows[i]
		
		AnimateWindowAlpha(w.image,0.0,1.0,0.2,delay)
		AnimateWindowAlpha(w.info,0.0,1.0,0.2,delay)

		if w.image_selected then
			AnimateWindowAlpha(w.image_selected,0.0,1.0,0.2,delay)

			AnimateWindowPos(w,w.position,POS(w.position[1]+40,w.position[2]),0.3,0.2+0.1*num_windows)
		end
		
		delay=delay+0.1
	end

end

local function HideEventWindows()
end


local TrackTypeOffsets = {
	[TRACKTYPE_FOREST] = LevelIndex.Forest1A - 1,
	[TRACKTYPE_FIELDS] = LevelIndex.Fields1A - 1,
	[TRACKTYPE_DESERT] = LevelIndex.Desert1A - 1,
	[TRACKTYPE_CANAL] = LevelIndex.Canal1A - 1,
	[TRACKTYPE_CITY] = LevelIndex.City1A - 1,
	[TRACKTYPE_RACING] = LevelIndex.Racing1A - 1,
}

local function GetTrackIndex(tracknum)
	local trackindex
	if tracknum >= LevelIndex.CURLING and tracknum <= LevelIndex.ROYALFLUSH then
		trackindex = tracknum - LevelIndex.CURLING + 1
	elseif tracknum >= LevelIndex.SKIJUMP and tracknum <= LevelIndex.SOCCER then
		trackindex = tracknum - LevelIndex.SKIJUMP + 1 + 6
	elseif tracknum >= LevelIndex.Arena1 and tracknum <= LevelIndex.Arena6 then
		trackindex = tracknum - LevelIndex.Arena1 + 1
	elseif tracknum >= LevelIndex.Derby1A and tracknum <= LevelIndex.Derby6A then
		trackindex = tracknum - LevelIndex.Derby1A + 1
	elseif tracknum >= LevelIndex.Nascar1A and tracknum <= LevelIndex.Nascar1C then
		trackindex = tracknum - LevelIndex.Nascar1A + 1
	else
		trackindex = tracknum - TrackTypeOffsets[Levels[tracknum].TrackType]
	end
	return trackindex
end

local function RefreshEventGrid(self)
	for i,event in ipairs(Events) do
		wm.GetWindow("event_icon_"..i):AttachResource(self:getResource(Levels[event.trackid].TrackIcon))
		if event.rules == ReplicatedSession.GAMETYPE_STUNT or event.rules == ReplicatedSession.GAMETYPE_DERBY_LMS then
			wm.GetWindow("event_info_"..i):SetTitle(L"")
		else
			wm.GetWindow("event_info_"..i):SetTitle(L(event.lapsOrTimeLimit))
		end
	end
	for i = table.getn(Events) + 1, 12 do
		wm.GetWindow("event_icon_"..i):AttachResource(self:getResource("track_images1_empty_box"))
		wm.GetWindow("event_info_"..i):SetTitle(L"")
	end
end

local EventVarNames =
{
	[ReplicatedSession.GAMETYPE_RACE] = MULTIPLAYER_LAPS,
	[ReplicatedSession.GAMETYPE_PONGRACE] = MULTIPLAYER_TURNS,
	[ReplicatedSession.GAMETYPE_DERBY_FRAG] = MULTIPLAYER_ROUNDTIME,
	[ReplicatedSession.GAMETYPE_HUNTER_PREY] = MULTIPLAYER_ROUNDTIME,
}

local Presets = {
	{ name=PRESETS_NAME_OUTDOOR, desc=PRESETS_OUTDOOR, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_fields1", events={
		{ trackid=LevelIndex.Forest1A },
		{ trackid=LevelIndex.Desert1B },
		{ trackid=LevelIndex.Fields1A },
		{ trackid=LevelIndex.Forest1C },
		{ trackid=LevelIndex.Desert1A },
		{ trackid=LevelIndex.Fields1C },
		{ trackid=LevelIndex.Forest1B },
		{ trackid=LevelIndex.Desert1C },
		{ trackid=LevelIndex.Fields1B },
	} },
	{ name=PRESETS_NAME_FOREST, desc=PRESETS_FOREST, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_forest1", events={
		{ trackid=LevelIndex.Forest1A },
		{ trackid=LevelIndex.Forest2B },
		{ trackid=LevelIndex.Forest1C },
		{ trackid=LevelIndex.Forest2A },
		{ trackid=LevelIndex.Forest1B },
		{ trackid=LevelIndex.Forest2C },
	} },
	{ name=PRESETS_NAME_URBAN, desc=PRESETS_URBAN, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_city1", events={
		{ trackid=LevelIndex.City2A },
		{ trackid=LevelIndex.Canal1B },
		{ trackid=LevelIndex.City2C },
		{ trackid=LevelIndex.Canal1A },
		{ trackid=LevelIndex.City1B },
		{ trackid=LevelIndex.Canal1C },
		{ trackid=LevelIndex.City1A },
		{ trackid=LevelIndex.City2B },
		{ trackid=LevelIndex.City1C },
	} },
	{ name=PRESETS_NAME_DESERT, desc=PRESETS_DESERT, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_desert1", events={
		{ trackid=LevelIndex.Desert1A },
		{ trackid=LevelIndex.Desert1B },
		{ trackid=LevelIndex.Desert1C },
	} },
	{ name=PRESETS_NAME_CANAL, desc=PRESETS_CANAL, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_canals1", events={
		{ trackid=LevelIndex.Canal1A },
		{ trackid=LevelIndex.Canal1B },
		{ trackid=LevelIndex.Canal1C },
	} },
	{ name=PRESETS_NAME_RACING, desc=PRESETS_RACING, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_racing1", events={
		{ trackid=LevelIndex.Racing1A },
		{ trackid=LevelIndex.Racing2C },
		{ trackid=LevelIndex.Racing1B },
		{ trackid=LevelIndex.Racing2A },
		{ trackid=LevelIndex.Racing2B },
		{ trackid=LevelIndex.Racing1C },
	} },
	{ name=PRESETS_NAME_FIELD, desc=PRESETS_FIELD, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_fields3", events={
		{ trackid=LevelIndex.Fields2A },
		{ trackid=LevelIndex.Fields1A },
		{ trackid=LevelIndex.Fields2B },
		{ trackid=LevelIndex.Fields1B },
		{ trackid=LevelIndex.Fields2C },
		{ trackid=LevelIndex.Fields1C },
	} },
	{ name=PRESETS_NAME_MIXED1, desc=PRESETS_MIXED1, type=ReplicatedSession.GAMETYPE_TOURNAMENT, icon="track_images_derby1", events={
		{ trackid=LevelIndex.Derby1A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.Racing2B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.STONESKIPPING, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Fields1A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.RINGOFFIRE, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Derby6A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.City2B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Nascar1A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.SKIJUMP, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Forest1B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Arena6, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.CURLING, rules=ReplicatedSession.GAMETYPE_STUNT },
	} },
	{ name=PRESETS_NAME_MIXED2, desc=PRESETS_MIXED2, type=ReplicatedSession.GAMETYPE_TOURNAMENT, icon="track_images_derby3", events={
		{ trackid=LevelIndex.SOCCER, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Desert1C, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Derby4A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.BASKETBALL, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Canal1A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Arena5, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.HIGHJUMP, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.Forest2A, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Nascar1B, rules=ReplicatedSession.GAMETYPE_RACE },
		{ trackid=LevelIndex.Derby3A, lapsOrTimeLimit=6, rules=ReplicatedSession.GAMETYPE_DERBY_WRECKING },
		{ trackid=LevelIndex.BOWLING, rules=ReplicatedSession.GAMETYPE_STUNT },
		{ trackid=LevelIndex.City1B, rules=ReplicatedSession.GAMETYPE_RACE },
	} },
	{ name=PRESETS_NAME_DERBY, desc=PRESETS_DERBY, type=ReplicatedSession.GAMETYPE_DERBY_WRECKING, icon="track_images_derby5", events={
		{ trackid=LevelIndex.Derby1A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby2A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby3A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby4A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby5A, lapsOrTimeLimit=6 },
		{ trackid=LevelIndex.Derby6A, lapsOrTimeLimit=6 },
	} },
	{ name=PRESETS_NAME_SPECIAL, desc=PRESETS_SPECIAL, type=ReplicatedSession.GAMETYPE_RACE, icon="track_images_oval1", events={
		{ trackid=LevelIndex.Nascar1A },
		{ trackid=LevelIndex.Arena1 },
		{ trackid=LevelIndex.Arena5 },
		{ trackid=LevelIndex.Arena3 },
		{ trackid=LevelIndex.Nascar1C },
		{ trackid=LevelIndex.Arena4 },
		{ trackid=LevelIndex.Arena2 },
		{ trackid=LevelIndex.Arena6 },
		{ trackid=LevelIndex.Nascar1B },
	} },
	{ name=PRESETS_NAME_STUNT, desc=PRESETS_STUNT, type=ReplicatedSession.GAMETYPE_STUNT, icon="track_images_stunt2", events={
		{ trackid=LevelIndex.CURLING },
		{ trackid=LevelIndex.HIGHJUMP },
		{ trackid=LevelIndex.STONESKIPPING },
		{ trackid=LevelIndex.RINGOFFIRE },
		{ trackid=LevelIndex.DARTS },
		{ trackid=LevelIndex.ROYALFLUSH },
		{ trackid=LevelIndex.SKIJUMP },
		{ trackid=LevelIndex.FIELDGOAL },
		{ trackid=LevelIndex.BOWLING },
		{ trackid=LevelIndex.BASKETBALL },
		{ trackid=LevelIndex.BASEBALL },
		{ trackid=LevelIndex.SOCCER },
	} },
}

menu_multiplayer_tournament_presets = CreateMenuFromTemplate("template_multiplayer")
menu_multiplayer_tournament_presets.options.title = TITLE_LIVE_PRESETS
menu_multiplayer_tournament_presets.back = entermenu("menu_multiplayer_buildtournament")

function menu_multiplayer_tournament_presets.create(self)
	self.parent:create(self)
	
	self:addResource("backdrops1.tga",backdrops1,backdrops1_size)
	self:addResource("backdrops2.tga",backdrops2,backdrops2_size)
	self:addResource("track_images.tga",track_images,track_images_size)
	self:addResource("selection_elements.tga",selection_elements,selection_elements_size)
	self:addResource("garage_elements1.tga",garage_elements1,garage_elements1_size)

	self:loadResources()
	
	self.items = { }
end

function menu_multiplayer_tournament_presets.init(self)
	self.parent:init(self)

	if menu_multiplayer_buildtournament.partymode then
		wm.GetWindow("menubar_gamespy_logo"):HideWindow()
	end
	
	GUI:SetBackgroundVideo("data/video/bg_main")

	local pos = POS(340,253)
	local p = Frame{Name="info_window",Position=pos,Size=SIZE(288,100)}

	Frame { Position=RELATIVEPOS(POS(340,253),pos), Size=SIZE(69,100), Parent=p }:AttachResource(self:getResource("backdrop_detailed_tip"))
	Frame { Position=RELATIVEPOS(POS(409,253),pos), Size=SIZE(239,100), Parent=p }:AttachResource(self:getResource("backdrop_detailed_main"))

	StaticText { Name="preset_name", Font=fontmedium(), Color=GetPaletteColor(3), Position=POS(357,255), Size=SIZE(200,19) }
	StaticText { Name="preset_description", WordWrap=TRUE, TextLineAdjust=7, Font=fontmedium(), Color=GetPaletteColor(5), Position=POS(364,275), Size=SIZE(226,75) }
	
	local ppos = POS(0,62)
	p = Frame{Name="track_image_bar",Position=ppos,Size=SIZE(640,22)}:AttachResource(self:getResource("black_transparent_50"))

	--//backdrop
	local resource = self:getResource("backdrop_normal")
	local size = GetResourceSize(resource)

	Frame { Position=POS(56,84), Size=size}:AttachResource(resource)
	Frame { Position=POS(81,169), Size=size}:AttachResource(resource)
	Frame { Position=POS(106,254), Size=size}:AttachResource(resource)
	Frame { Position=POS(131,339), Size=size}:AttachResource(resource)

	--//races
	state.eventwindows={}

	local rowpositions={
		POS(82,128),
		POS(94,170),
		POS(105,212),
		POS(117,254),
	}

	local imgsize = wm.GetResourceSize(self:getResource("track_images_forest1"))
	for i=1,12 do
		local pos = rowpositions[math.floor((i-1)/3)+1]
		local x = pos[1] + 71 * math.mod(i-1,3)
		local w = Frame { Name="event_icon_frame_"..i, Position=POS(x,pos[2]), Size=imgsize }
		w.position=POS(x,pos[2])

		local imageframe = Frame { Name="event_icon_"..i, Position=POS(0,0), Size=imgsize, Parent=w }
		
		if Events[i] then
			w.image = imageframe:AttachResource(self:getResource(Levels[Events[i].trackid].TrackIcon))
			w.image:SetAlpha(0)
		else
			w.image = imageframe:AttachResource(self:getResource("track_images1_empty_box"))
			w.image:SetAlpha(0)
		end

		w.info = StaticText { Name="event_info_"..i, Position=POS(60,18), Size=SIZE(20,20), Font=fontmedium(), Color=GetPaletteColor(1), Parent=w }

		table.insert(state.eventwindows,w)
	end
	
	local validpresets = { }
	local ttype = menu_multiplayer_buildtournament.type
	for k,p in pairs(Presets) do
		local add = false
		if ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY and (p.type == ReplicatedSession.GAMETYPE_DERBY_FRAG or p.type == ReplicatedSession.GAMETYPE_DERBY_LMS or p.type == ReplicatedSession.GAMETYPE_DERBY_WRECKING or p.type == ReplicatedSession.GAMETYPE_HUNTER_PREY) then
			add = true
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE and (p.type == ReplicatedSession.GAMETYPE_PONGRACE or p.type == ReplicatedSession.GAMETYPE_RACE) then
			add = true
		elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT then
			add = true
		elseif ttype == p.type then
			add = true
		end

		if add then
			local preset = { }
			preset.name = p.name
			preset.desc = p.desc
			preset.type = p.type
			preset.icon = p.icon
			preset.events = { }
			
			-- Copy events and set missing event parameters where needed
			for pk,e in pairs(p.events) do
				local event = { }
				for ek,ev in pairs(e) do
					event[ek] = ev
				end
				if event.rules == nil then
					event.rules = p.type
				end
				if event.lapsOrTimeLimit == nil and Levels[event.trackid].Laps ~= nil then
					event.lapsOrTimeLimit = Levels[event.trackid].Laps
				end
				table.insert(preset.events, event)
			end
			table.insert(validpresets, preset)
		end
	end
	
	local size = wm.GetResourceSize(self:getResource("track_imagesl_selection_glow"))
	local bar = ButtonBar { Slots=9, Name="presets", Position=POS(0,357), Padding=0, SelectedSlotSize=size, --SIZE(78,40),
		SlotSize=size, Size=SIZE(600,60), ButtonSelection=self:getResource("track_imagesl_selection_glow") }
		
	local oldEvents = { }
	for k,v in pairs(Events) do
		oldEvents[k] = v
	end
	
	function bar.onBack(self)
		Events = { }
		for k,v in pairs(oldEvents) do
			Events[k] = v
		end
		EnterMenu("menu_multiplayer_buildtournament")
	end

	bar.onButtonChange = function(bself,id)
		Events = validpresets[id].events

		RefreshEventGrid(self)
		if validpresets[id].name then
			wm.GetWindow("preset_name"):SetTitle(validpresets[id].name)
		end
		if validpresets[id].desc then
			wm.GetWindow("preset_description"):SetTitle(validpresets[id].desc)
		end
		wm.GetWindow("preset_description"):WordWrap()
	end

	bar.onChildAction = function(self,id)
		EnterMenu("menu_multiplayer_buildtournament")
	end

	for k,p in pairs(validpresets) do
		bar:AddButton(self:getResource(p.icon))
	end

	bar:onButtonChange(1)
	bar:SetFocus()
end

function menu_multiplayer_tournament_presets.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_tournament_presets.startshow(self)
	self.parent:startshow(self)

	ShowEventWindows()
end

function menu_multiplayer_tournament_presets.starthide(self)
	self.parent:starthide(self)

	HideEventWindows()
end

function menu_multiplayer_tournament_presets.update(self,time)
	self.parent:update(self,time)
end

local function ShowPresets()
	EnterMenu("menu_multiplayer_tournament_presets")
end

local function StartAddEvent()
	EnterMultiplayerRaceSelection(
		menu_multiplayer_buildtournament.type,
		function(event)
			if event then
				table.insert(Events, event)
			end
			EnterMenu("menu_multiplayer_buildtournament")
		end,
		function()
			EnterMenu("menu_multiplayer_buildtournament")
		end,		
		menu_multiplayer_buildtournament.numplayers
	)
end

local function UpdateEventInfo()
	local event = Events[CurrentEvent]
	local type = event.rules
	local self = menu_multiplayer_buildtournament
	
	wm.GetWindow("track_name"):SetTitle(L(Levels[event.trackid].Name))
	wm.GetWindow("game_mode"):SetTitle(GameModeNames[event.rules])
	if type == ReplicatedSession.GAMETYPE_STUNT then
		wm.GetWindow("lap"):HideWindow()
		wm.GetWindow("num_laps"):HideWindow()
	else
		local lapiconwin = wm.GetWindow("lap")
		local lapswin = wm.GetWindow("num_laps")
		lapiconwin:ShowWindow()
		lapswin:ShowWindow()

		local lapstxt
		local lapicon
		if type == ReplicatedSession.GAMETYPE_RACE then
			lapstxt = MULTIPLAYER_LAPS
			lapicon = "lap"
		elseif type == ReplicatedSession.GAMETYPE_DERBY_WRECKING then
			lapstxt = MULTIPLAYER_MINUTES
			lapicon = "clock"
		end
		lapiconwin:AttachResource(self:getResource(lapicon))

		wm.GetWindow("num_laps"):SetTitle(WStringConcat(L(event.lapsOrTimeLimit.." "), lapstxt))
	end

	local eventnum = WStringConcat(MULTIPLAYER_EVENT, L(" "..CurrentEvent.." / "..table.getn(Events)))
	wm.GetWindow("event_number"):SetTitle(eventnum)
end

local function StartEditEvents(eventnum)
	GUI:HideMenuButtons()
	if eventnum ~= nil then
		CurrentEvent = eventnum
		CurRow = math.floor((CurrentEvent-1) / 3)
		CurCol = math.mod(CurrentEvent-1, 3)
	else
		CurRow = 0
		CurCol = 0
		CurrentEvent = 1
	end
	local x,y = wm.GetWindow("event_icon_frame_"..CurrentEvent):GetPosition()
	wm.GetWindow("highlight"):SetPosition(x-4, y-6)
	wm.GetWindow("highlight"):ShowWindow()
	wm.GetWindow("info_window"):ShowWindow()
	UpdateEventInfo()
	wm.GetWindow("edit_handler"):SetFocus()
	
	GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK, BUTTON_EXTRA, UI_DELETE)
end

local function CreateTournament()
	GUI:HideMenuButtons()
	menu_multiplayer_buildtournament.okaction(Events)
end

BuildMenuButtons = function()
	menu_multiplayer_buildtournament.items = { }
	if table.getn(Events) < 12 then	
		table.insert(menu_multiplayer_buildtournament.items,
			{ ICON_LIVE_BUILD_ADDTRACK, function() StartAddEvent() end, ICON(menu_multiplayer_buildtournament,"icon_add_track") } )
	end
	
	if not menu_multiplayer_buildtournament.partymode then
		local ttype = menu_multiplayer_buildtournament.type
		for k,p in pairs(Presets) do
			local showpresets = false
			if ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY and (p.type == ReplicatedSession.GAMETYPE_DERBY_FRAG or p.type == ReplicatedSession.GAMETYPE_DERBY_LMS or p.type == ReplicatedSession.GAMETYPE_DERBY_WRECKING or p.type == ReplicatedSession.GAMETYPE_HUNTER_PREY) then
				showpresets = true
			elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE and (p.type == ReplicatedSession.GAMETYPE_PONGRACE or p.type == ReplicatedSession.GAMETYPE_RACE) then
				showpresets = true
			elseif ttype == ReplicatedSession.GAMETYPE_TOURNAMENT then
				showpresets = true
			elseif ttype == p.type then
				showpresets = true
			end

			if showpresets then
				table.insert(menu_multiplayer_buildtournament.items,
					{ ICON_LIVE_BUILD_PRESETS, function() ShowPresets() end, ICON(menu_multiplayer_buildtournament,"icon_presets") } )
				break
			end
		end
	end
	
	if table.getn(Events) > 0 then
		table.insert(menu_multiplayer_buildtournament.items,
			{ ICON_LIVE_BUILD_EDITTRACK, function() StartEditEvents() end, ICON(menu_multiplayer_buildtournament,"icon_edit_events") } )
		table.insert(menu_multiplayer_buildtournament.items,
			{ ICON_MULTIPLAYER_CONTINUE, function() CreateTournament() end, ICON(menu_multiplayer_buildtournament,"icon_continue") } )
	end
	
	--GUI:HideMenuButtons()
	GUI:InitMenuButtons(menu_multiplayer_buildtournament.items)
	GUI:ShowMenuButtons()
	GUI:SetActiveItem(1)
end

function menu_multiplayer_buildtournament.create(self)
	self.parent:create(self)

	self:addResource("backdrops1.tga",backdrops1,backdrops1_size)
	self:addResource("backdrops2.tga",backdrops2,backdrops2_size)
	self:addResource("track_images.tga",track_images,track_images_size)
	self:addResource("selection_elements.tga",selection_elements,selection_elements_size)

	self:loadResources()

	if not menu_multiplayer_buildtournament.edit then
		BuildMenuButtons()
	else
		self.items = { }	
	end
end

local function CreateEditRaceItems(self)
	-- "Edit events" inputhandler
	local handler = InputHandler { Name="edit_handler" }
	handler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		if VirtualKey == KeyCodes["BUTTON_START"] then
			Events[CurrentEvent].num = CurrentEvent
			EnterMultiplayerRaceEdit(
				menu_multiplayer_buildtournament.type,
				Events[CurrentEvent],
				function(event)
					local eventnum = event.num
					event.num = nil
					Events[eventnum] = event
					EnterBuildTournamentMenuAfterEdit(eventnum)
				end,
				function(event)
					local eventnum = event.num
					event.num = nil
					EnterBuildTournamentMenuAfterEdit(eventnum)
				end,
				menu_multiplayer_buildtournament.numplayers
			)
			playmenusound_action()
		elseif VirtualKey == KeyCodes["BUTTON_SELECT"] then
			BuildMenuButtons()
			wm.GetWindow("highlight"):HideWindow()
			wm.GetWindow("info_window"):HideWindow()
			GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK)
			playmenusound_back()
		elseif (XBOX and VirtualKey == KeyCodes["BUTTON_Y"]) or ((PS2 or PC) and VirtualKey == KeyCodes["BUTTON_X"]) then
			table.remove(Events, CurrentEvent)
			if CurrentEvent > table.getn(Events) then
				CurrentEvent = table.getn(Events)
				CurRow = math.floor((CurrentEvent-1) / 3)
				CurCol = math.mod(CurrentEvent-1, 3)
			end
			RefreshEventGrid(self)
			if table.getn(Events) == 0 then
--				Events = { }
				BuildMenuButtons()
				wm.GetWindow("highlight"):HideWindow()
				wm.GetWindow("info_window"):HideWindow()
				GUI:SetHelpButtons(BUTTON_OK, UI_SELECT, BUTTON_BACK, UI_BACK)
			else
				UpdateEventInfo()		
			end
			playmenusound_action()
		elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
			CurRow = math.mod(CurRow + 1, 4)
			if Events[CurRow*3+CurCol+1] == nil then
				CurRow = 0
			end
			CurrentEvent = CurRow*3+CurCol+1
			UpdateEventInfo()
			playmenusound_move()
		elseif VirtualKey == KeyCodes["BUTTON_UP"] then
			repeat
				CurRow = math.mod(CurRow - 1 + 4, 4)
				CurrentEvent = CurRow*3+CurCol+1
			until Events[CurrentEvent] ~= nil
			UpdateEventInfo()
			playmenusound_move()
		elseif VirtualKey == KeyCodes["BUTTON_LEFT"] then
			local numevents = table.getn(Events)
			CurrentEvent = math.mod(CurrentEvent - 2 + numevents, numevents) + 1
			CurCol = math.mod(CurrentEvent - 1, 3)
			CurRow = math.floor((CurrentEvent - 1) / 3)
			UpdateEventInfo()
			playmenusound_move()
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			CurrentEvent = math.mod(CurrentEvent, table.getn(Events)) + 1
			CurCol = math.mod(CurrentEvent - 1, 3)
			CurRow = math.floor((CurrentEvent - 1) / 3)
			UpdateEventInfo()
			playmenusound_move()
		end
		
		if Events[CurrentEvent] then
			local x,y = wm.GetWindow("event_icon_frame_"..CurrentEvent):GetPosition()
			wm.GetWindow("highlight"):SetPosition(x-4, y-6)
		end
	end
end

function menu_multiplayer_buildtournament.init(self)
	self.parent:init(self)
	
	if menu_multiplayer_buildtournament.partymode then
		wm.GetWindow("menubar_gamespy_logo"):HideWindow()
	end

	GUI:SetBackgroundVideo("data/video/bg_main")

	local ppos = POS(0,62)
	local p = Frame{Name="track_image_bar",Position=ppos,Size=SIZE(640,22)}:AttachResource(self:getResource("black_transparent_50"))

	--//backdrop
	local resource = self:getResource("backdrop_normal")
	local size = GetResourceSize(resource)

	Frame { Position=POS(56,84), Size=size}:AttachResource(resource)
	Frame { Position=POS(81,169), Size=size}:AttachResource(resource)
	Frame { Position=POS(106,254), Size=size}:AttachResource(resource)
	Frame { Position=POS(131,339), Size=size}:AttachResource(resource)

	--//races
	state.eventwindows={}

	local rowpositions={
		POS(82,128),
		POS(94,170),
		POS(106,212),
		POS(118,254),
	}

	local imgsize = wm.GetResourceSize(self:getResource("track_images_forest1"))
	for i=1,12 do
		local pos = rowpositions[math.floor((i-1)/3)+1]
		local x = pos[1] + 71 * math.mod(i-1,3)
		local w = Frame { Name="event_icon_frame_"..i, Position=POS(x,pos[2]), Size=imgsize }
		w.position=pos

		local imageframe = Frame { Name="event_icon_"..i, Position=POS(0,0), Size=imgsize, Parent=w }
		
		w.info = StaticText { Name="event_info_"..i, Position=POS(66,18), Size=SIZE(20,20), Font=fontmedium(), Color=GetPaletteColor(1), Align=FONTF_RIGHT, Parent=w }

		if Events[i] then
			w.image = imageframe:AttachResource(self:getResource(Levels[Events[i].trackid].TrackIcon))
			w.image:SetAlpha(0)
			if Events[i].rules ~= ReplicatedSession.GAMETYPE_STUNT and Events[i].rules ~= ReplicatedSession.GAMETYPE_DERBY_LMS then
				w.info:SetTitle(L(Events[i].lapsOrTimeLimit))
			end
		else
			w.image = imageframe:AttachResource(self:getResource("track_images1_empty_box"))
			w.image:SetAlpha(0)
		end

		table.insert(state.eventwindows,w)
	end

	imgsize = wm.GetResourceSize(self:getResource("track_imagesl_selection_glow"))
	local hilite = Frame { Name="highlight", Position=POS(0,0), Size=imgsize, DrawBackgroundColor=FALSE, Layer=5 }:AttachResource(self:getResource("track_imagesl_selection_glow"))
	hilite:HideWindow()

	-- Track info for edit mode
	local pos = POS(353,298)
	p = Frame { Name="info_window", Position=pos, Size=SIZE(288,100) }

	Frame { Position=RELATIVEPOS(POS(353,298),pos), Size=SIZE(69,100), Parent=p }:AttachResource(self:getResource("backdrop_detailed_tip"))
	Frame { Position=RELATIVEPOS(POS(422,298),pos), Size=SIZE(219,100), Parent=p }:AttachResource(self:getResource("backdrop_detailed_main"))

	StaticText { Name="event_number", Position=RELATIVEPOS(POS(369,303),pos), Font=fontmedium(), Color=GetPaletteColor(33), Parent=p }
	StaticText { Name="game_mode", Position=RELATIVEPOS(POS(377,325),pos), Color=GetPaletteColor(34), Font=fontmedium(), Parent=p }
	StaticText { Name="track_name", Position=RELATIVEPOS(POS(385,348),pos), Color=GetPaletteColor(34), Font=fontmedium(), Parent=p }

	Frame { Name="lap", Position=RELATIVEPOS(POS(393,371),pos),Size=GetResourceSize(self:getResource("lap")),Parent=p}:AttachResource(self:getResource("lap"))
	StaticText { Name="num_laps", Position=RELATIVEPOS(POS(413,371),pos), Font=fontmedium(), Color=GetPaletteColor(34), Parent=p }

	p:HideWindow()
	
	CreateEditRaceItems(self)

	if menu_multiplayer_buildtournament.edit then
		menu_multiplayer_buildtournament.edit = false
		StartEditEvents(CurrentEvent)
	end
end

function menu_multiplayer_buildtournament.update(self,time)
	self.parent:update(self,time)
	
	local alpha = 1 - 0.20 + math.sin(time * 6) * 0.20
	wm.GetWindow("highlight"):SetAlpha(alpha)
end

function menu_multiplayer_buildtournament.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_buildtournament.startshow(self)
	self.parent:startshow(self)

	ShowEventWindows()
end

function menu_multiplayer_buildtournament.starthide(self)
	self.parent:starthide(self)

	HideEventWindows()
end
